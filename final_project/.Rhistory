mutate(z_scz = BETA / SE) |>
dplyr::select(Cluster, z_scz, p_scz = P)
neu <- read_xlsx("data/Supplementary_Datasets.xlsx", sheet = "Supplementary_Data_8") |>
filter(Phenotype == "neuroticism") |>
mutate(z_neu = BETA / SE) |>
dplyr::select(Cluster, z_neu, p_neu = P)
df_join <- inner_join(scz, neu, by = "Cluster") |>
mutate(
delta_z = z_scz - z_neu,
delta_p = 1 - pnorm(delta_z),
log10p = -log10(delta_p),
sig = if_else(delta_p < 0.05, "yes", "no")
)
tsne <- read_csv("data/neuron_tsne.csv.gz") |>
rename(Cluster = ClusterID)
plot_df <- inner_join(tsne, df_join, by = "Cluster")
tsne <- read_csv("data/neuron_tsne.csv.gz") |>
rename(CellID = `CellID`) %>%  # Ensure proper column name
dplyr::select(CellID, TSNE1, TSNE2)
df_join <- CT_annot %>%  # From your previous step
select(CellID, Cluster)
tsne <- read_csv("data/neuron_tsne.csv.gz") |>
rename(CellID = `CellID`) %>%  # Ensure proper column name
dplyr::select(CellID, TSNE1, TSNE2)
df_join <- CT_annot %>%  # From your previous step
dplyr::select(CellID, Cluster)
knitr::opts_chunk$set(echo = TRUE)
```{r}
library(data.table)
library(tidyverse)
library(loomR)
library(here)
library(ggplot2)
library(readxl)
# 1. LOOM
lfile <- connect(filename = "../data/adult_human_20221007.loom", mode = "r", skip.validate = TRUE)
CellID <- lfile[["col_attrs/CellID"]][]
Cluster <- lfile[["col_attrs/Clusters"]][]
dat <- cbind(CellID, Cluster) %>% as.data.frame()
# 2. CLuster annotation
CT_annot <- read_excel("../data/silleti_table_s2.xlsx") %>%
filter(!is.na(Cluster)) %>%
mutate(Cluster = as.character(Cluster),
Supercluster = gsub("-| ", "_", Supercluster)) %>%
dplyr::select(Cluster, Supercluster)
# 2. CLuster annotation
CT_annot <- read_excel("../data/silleti_table_s2.xlsx") %>%
filter(!is.na(Cluster)) %>%
mutate(Cluster = as.character(Cluster),
Supercluster = gsub("-| ", "_", Supercluster)) %>%
dplyr::select(Cluster, Supercluster)
dat <- dat %>%
mutate(Cluster = as.character(Cluster)) %>%
left_join(CT_annot, by = "Cluster")
# 3. t-SNEcoordinates
dat.tsne <- fread(here("data/neuron_tsne.csv.gz"))
dat <- dat %>% inner_join(dat.tsne, by = "CellID")
# 4. data S-LDSC – EDUCATIONAL_ATTAINMENT
dat.cluster.res <- read_xlsx(("../data/Supplementary_Datasets.xlsx"), sheet = "Supplementary_Data_8") %>%
filter(Phenotype == "educational_attainment") %>%
separate(Cluster, into = c("V1", "Cluster0"), sep = " \\(", remove = FALSE) %>%
mutate(Cluster0 = gsub("\\)", "", Cluster0),
minuslog10P = -log10(P)) %>%
dplyr::select(Cluster0, minuslog10P, if.sig.fdr)
mylab <- dat %>%
group_by(Supercluster) %>%
summarise(TSNE1 = mean(TSNE1), TSNE2 = mean(TSNE2)) %>%
ungroup()
dat1 <- dat %>%
left_join(dat.cluster.res, by = c("Cluster" = "Cluster0")) %>%
mutate(minuslog10P = ifelse(if.sig.fdr == "yes", minuslog10P, NA))
# 5. plot
p_edu <- ggplot(dat1 %>% mutate(tmp = "not sig. (FDR)"),
aes(x = TSNE1, y = TSNE2, color = minuslog10P, fill = tmp)) +
geom_point(alpha = .1, size = .1) +
theme_classic() +
scico::scale_color_scico(palette = "lajolla",
direction = -1,
na.value = "#E5E5E5", midpoint = 5,
name = "educational attainment\n-log10(P)") +
xlab("tSNE1") + ylab("tSNE2") +
scale_fill_manual(values = NA, name = "") +
guides(fill = guide_legend(override.aes = list(fill = "#E5E5E5", size = 2))) +
annotate(geom = "text", x = mylab$TSNE1, y = mylab$TSNE2, label = mylab$Supercluster,
color = "black") +
theme(legend.position = "bottom", legend.box = "horizontal")
# 6. Save
ggsave(p_edu,
filename = ("../figures/3a_tSNE_educational_attainment.pdf"),
width = 10, height = 10.5)
knitr::opts_chunk$set(echo = TRUE)
```{r}
library(data.table)
library(tidyverse)
library(loomR)
library(here)
library(ggplot2)
library(readxl)
knitr::opts_chunk$set(echo = TRUE)
# 1. LOOM
lfile <- connect(filename = "../data/adult_human_20221007.loom", mode = "r", skip.validate = TRUE)
CellID <- lfile[["col_attrs/CellID"]][]
Cluster <- lfile[["col_attrs/Clusters"]][]
dat <- cbind(CellID, Cluster) %>% as.data.frame()
# 2. CLuster annotation
CT_annot <- read_excel("../data/silleti_table_s2.xlsx") %>%
filter(!is.na(Cluster)) %>%
mutate(Cluster = as.character(Cluster),
Supercluster = gsub("-| ", "_", Supercluster)) %>%
dplyr::select(Cluster, Supercluster)
dat <- dat %>%
mutate(Cluster = as.character(Cluster)) %>%
left_join(CT_annot, by = "Cluster")
# 3. t-SNEcoordinates
dat.tsne <- fread(here("data/neuron_tsne.csv.gz"))
dat <- dat %>% inner_join(dat.tsne, by = "CellID")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
# 1. Wczytaj dane t-SNE
amyg_tsne <- read_csv("data/amygdala_tsne.csv.gz")
library(tidyverse)
library(readxl)
# 1. Wczytaj dane t-SNE
amyg_tsne <- read_csv("../data/amygdala_tsne.csv.gz")
# 3. Wczytaj wyniki S-LDSC z Supplementary_Data_8
scz <- read_xlsx("data/Supplementary_Datasets.xlsx", sheet = "Supplementary_Data_8") %>%
filter(Phenotype == "scz2022") %>%
mutate(
Cluster0 = str_extract(Cluster, "\\((\\d+)\\)"),
Cluster0 = gsub("[()]", "", Cluster0),
Cluster = paste0("V", Cluster0),
log10p = -log10(P),
sig_fdr = ifelse(P.fdr < 0.05, "yes", "no")
) %>%
select(Cluster, log10p, sig_fdr)
# 3. Wczytaj wyniki S-LDSC z Supplementary_Data_8
scz <- read_xlsx("../data/Supplementary_Datasets.xlsx", sheet = "Supplementary_Data_8") %>%
filter(Phenotype == "scz2022") %>%
mutate(
Cluster0 = str_extract(Cluster, "\\((\\d+)\\)"),
Cluster0 = gsub("[()]", "", Cluster0),
Cluster = paste0("V", Cluster0),
log10p = -log10(P),
sig_fdr = ifelse(P.fdr < 0.05, "yes", "no")
) %>%
select(Cluster, log10p, sig_fdr)
# 3. Wczytaj wyniki S-LDSC z Supplementary_Data_8
scz <- read_xlsx("../data/Supplementary_Datasets.xlsx", sheet = "Supplementary_Data_8") %>%
filter(Phenotype == "scz2022") %>%
mutate(
Cluster0 = str_extract(Cluster, "\\((\\d+)\\)"),
Cluster0 = gsub("[()]", "", Cluster0),
Cluster = paste0("V", Cluster0),
log10p = -log10(P),
sig_fdr = ifelse(P.fdr < 0.05, "yes", "no")
) %>%
dplyr::select(Cluster, log10p, sig_fdr)
# 4. Połącz dane t-SNE z wynikami S-LDSC
df_plot <- amyg_tsne %>%
left_join(scz, by = "Cluster")
# 3. Wczytaj wyniki S-LDSC z Supplementary_Data_8
scz <- read_xlsx("../data/Supplementary_Datasets.xlsx", sheet = "Supplementary_Data_8") %>%
filter(Phenotype == "scz2022") %>%
mutate(
Cluster0 = str_extract(Cluster, "\\((\\d+)\\)"),
Cluster0 = gsub("[()]", "", Cluster0),
Cluster = paste0("V", Cluster0),
log10p = -log10(P),
sig_fdr = ifelse(P.fdr < 0.05, "yes", "no")
) %>%
dplyr::select(Cluster, log10p, sig_fdr)
# 4. Połącz dane t-SNE z wynikami S-LDSC
df_plot <- amyg_tsne %>%
left_join(scz, by = "CellID")
# 3. Wczytaj wyniki S-LDSC z Supplementary_Data_8
scz <- read_xlsx("../data/Supplementary_Datasets.xlsx", sheet = "Supplementary_Data_8") %>%
filter(Phenotype == "scz2022") %>%
mutate(
Cluster0 = str_extract(Cluster, "\\((\\d+)\\)"),
Cluster0 = gsub("[()]", "", Cluster0),
Cluster = paste0("V", Cluster0),
log10p = -log10(P),
sig_fdr = ifelse(P.fdr < 0.05, "yes", "no")
) %>%
dplyr::select(Cluster, log10p, sig_fdr)
# 4. Połącz dane t-SNE z wynikami S-LDSC
df_plot <- amyg_tsne %>%
left_join(scz, by = "Cluster")
colnames(amyg_tsne)  # Wyświetla nazwy kolumn
head(amyg_tsne)       # Pokazuje pierwsze wiersze
glimpse(amyg_tsne)    # Bardziej szczegółowy podgląd struktury danych
amyg_tsne <- amyg_tsne %>%
mutate(Cluster = str_extract(CellID, "(?<=_)\\d+(?=:)")) %>%  # Wyciąga numer przed ":" i po "_"
mutate(Cluster = paste0("V", Cluster))  # Dopasowuje do formatu "V1", "V2" itd.
# 3. Wczytaj wyniki S-LDSC z Supplementary_Data_8
scz <- read_xlsx("../data/Supplementary_Datasets.xlsx", sheet = "Supplementary_Data_8") %>%
filter(Phenotype == "scz2022") %>%
mutate(
Cluster0 = str_extract(Cluster, "\\((\\d+)\\)"),
Cluster0 = gsub("[()]", "", Cluster0),
Cluster = paste0("V", Cluster0),
log10p = -log10(P),
sig_fdr = ifelse(P.fdr < 0.05, "yes", "no")
) %>%
dplyr::select(Cluster, log10p, sig_fdr)
# 4. Połącz dane t-SNE z wynikami S-LDSC
df_plot <- amyg_tsne %>%
left_join(scz, by = "Cluster")
# 5. Wykres tSNE
ggplot(df_plot, aes(x = TSNE1, y = TSNE2)) +
geom_point(aes(color = ifelse(sig_fdr == "yes", log10p, NA)),
size = 0.7, alpha = 0.9) +
scale_color_viridis_c(option = "plasma", na.value = "grey80", name = "-log10(p)") +
theme_classic() +
labs(title = "Amygdala excitatory: SCZ S-LDSC enrichment by cluster")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
# Wczytaj mapowanie klastrów do superklastrów
clusters_map <- readxl::read_xlsx("../data/siletti_table_s2.xlsx") %>%
dplyr::select(Cluster = 1, Supercluster = 2) %>%
mutate(Cluster = paste0("V", as.numeric(Cluster) + 1)) %>%  # Konwersja do formatu VXX
filter(Supercluster == "Amygdala excitatory")
library(tidyverse)
library(here)
# Wczytaj mapowanie klastrów do superklastrów
clusters_map <- readxl::read_xlsx("data/siletti_table_s2.xlsx") %>%
dplyr::select(Cluster = 1, Supercluster = 2) %>%
mutate(Cluster = paste0("V", as.numeric(Cluster) + 1)) %>%  # Konwersja do formatu VXX
filter(Supercluster == "Amygdala excitatory")
getwd()
library(tidyverse)
library(here)
# Wczytaj mapowanie klastrów do superklastrów
clusters_map <- readxl::read_xlsx(here("data/siletti_table_s2.xlsx")) %>%
dplyr::select(Cluster = 1, Supercluster = 2) %>%
mutate(Cluster = paste0("V", as.numeric(Cluster) + 1)) %>%  # Konwersja do formatu VXX
filter(Supercluster == "Amygdala excitatory")
library(tidyverse)
library(here)
# Wczytaj mapowanie klastrów do superklastrów
clusters_map <- readxl::read_xlsx("data/silleti_table_s2.xlsx") %>%
dplyr::select(Cluster = 1, Supercluster = 2) %>%
mutate(Cluster = paste0("V", as.numeric(Cluster) + 1)) %>%  # Konwersja do formatu VXX
filter(Supercluster == "Amygdala excitatory")
library(tidyverse)
library(here)
# Wczytaj mapowanie klastrów do superklastrów
clusters_map <- readxl::read_xlsx("../data/silleti_table_s2.xlsx") %>%
dplyr::select(Cluster = 1, Supercluster = 2) %>%
mutate(Cluster = paste0("V", as.numeric(Cluster) + 1)) %>%  # Konwersja do formatu VXX
filter(Supercluster == "Amygdala excitatory")
# Pobierz listę wszystkich klastrów
amyg_clusters <- clusters_map %>% pull(Cluster)
head(amyg_clusters)
amyg_clusters
library(tidyverse)
library(here)
library(data.table)
# 1. Wczytaj mapowanie klastrów ------------------------------------------------
clusters_map <- readxl::read_xlsx("../data/siletti_table_s2.xlsx") %>%
dplyr::select(Cluster = 1, Supercluster = 2) %>%
mutate(Cluster = paste0("V", as.numeric(Cluster) + 1)) %>%
filter(Supercluster == "Amygdala excitatory")
library(tidyverse)
library(here)
library(data.table)
# 1. Wczytaj mapowanie klastrów ------------------------------------------------
clusters_map <- readxl::read_xlsx("../data/silleti_table_s2.xlsx") %>%
dplyr::select(Cluster = 1, Supercluster = 2) %>%
mutate(Cluster = paste0("V", as.numeric(Cluster) + 1)) %>%
filter(Supercluster == "Amygdala excitatory")
# 2. Wczytaj dane TDEP ---------------------------------------------------------
tdep_data <- fread("../data/Siletti_Cluster_expression_specificity_TDEP_label.tsv.gz") %>%
filter(Cluster %in% clusters_map$Cluster) %>%
mutate(is_TDEP = ifelse(TDEP == 1, "yes", "no"))
# 3. Analiza genów specyficznych dla każdego klastra ---------------------------
cluster_stats <- tdep_data %>%
group_by(Cluster) %>%
summarise(
total_genes = n(),
tdep_genes = sum(TDEP == 1),
mean_specificity = mean(specificity[TDEP == 1]),
top_gene = ENSGID[which.max(specificity)],
top_gene_spec = max(specificity)
) %>%
arrange(desc(tdep_genes))
# 4. Zapisz wyniki -------------------------------------------------------------
write_tsv(cluster_stats, "../data/amygdala_excitatory_tdep_stats.tsv")
# 5. Wizualizacja --------------------------------------------------------------
library(ggrepel)
ggplot(cluster_stats, aes(x = tdep_genes, y = mean_specificity)) +
geom_point(aes(size = total_genes, color = tdep_genes), alpha = 0.7) +
geom_text_repel(aes(label = Cluster), size = 3, box.padding = 0.5) +
scale_color_viridis_c() +
labs(title = "Amygdala excitatory clusters: TDEP genes characteristics",
x = "Number of TDEP genes",
y = "Mean specificity of TDEP genes",
size = "Total genes",
color = "TDEP genes") +
theme_minimal()
library(tidyverse)
# Sprawdź czy w danych TDEP są jakiekolwiek klastry
tdep_data <- read_tsv("data/Siletti_Cluster_expression_specificity_TDEP_label.tsv.gz")
library(tidyverse)
# Sprawdź czy w danych TDEP są jakiekolwiek klastry
tdep_data <- read_tsv("../data/Siletti_Cluster_expression_specificity_TDEP_label.tsv.gz")
unique(tdep_data$Cluster) %>% head(20)  # Pokazuje pierwsze 20 nazw klastrów
# Sprawdź mapowanie z Siletti
clusters_map <- readxl::read_xlsx("../data/siletti_table_s2.xlsx") %>%
select(Cluster = 1, Supercluster = 2) %>%
mutate(Cluster = paste0("V", as.numeric(Cluster) + 1))
library(tidyverse)
# Sprawdź czy w danych TDEP są jakiekolwiek klastry
tdep_data <- read_tsv("../data/Siletti_Cluster_expression_specificity_TDEP_label.tsv.gz")
unique(tdep_data$Cluster) %>% head(20)  # Pokazuje pierwsze 20 nazw klastrów
# Sprawdź mapowanie z Siletti
clusters_map <- readxl::read_xlsx("../data/siletti_table_s2.xlsx") %>%
dplyr::select(Cluster = 1, Supercluster = 2) %>%
mutate(Cluster = paste0("V", as.numeric(Cluster) + 1))
library(tidyverse)
# Sprawdź czy w danych TDEP są jakiekolwiek klastry
tdep_data <- read_tsv("../data/Siletti_Cluster_expression_specificity_TDEP_label.tsv.gz")
unique(tdep_data$Cluster) %>% head(20)  # Pokazuje pierwsze 20 nazw klastrów
# Sprawdź mapowanie z Siletti
clusters_map <- readxl::read_xlsx("../data/silleti_table_s2.xlsx") %>%
dplyr::select(Cluster = 1, Supercluster = 2) %>%
mutate(Cluster = paste0("V", as.numeric(Cluster) + 1))
unique(clusters_map$Supercluster) %>% grep("Amygdala", ., value = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
# Rozpakuj archiwum (jeśli jeszcze nie rozpakowane)
untar("../data/supercluster.tar") exdir = ("../data/superclusters")
# Wczytaj wyniki S-LDSC
ldsc_results <- list.files(
("../data/superclusters"),
pattern = ".*Amygdala_excitatory.*results",
full.names = TRUE
) %>%
map_dfr(read_tsv) %>%
dplyr::select(
cluster = Category,  # Sprawdź dokładną nazwę kolumny
coefficient = Coefficient,
p_value = Coefficient_P_value,
z_score = Coefficient_Z_score
) %>%
mutate(
cluster = str_extract(cluster, "V\\d+"),  # Wyodrębnij VXX
p_fdr = p.adjust(p_value, method = "fdr")
)
# 2. Sprawdź nazwy kolumn w pierwszym pliku (diagnostyka)
if(length(ldsc_files) > 0) {
sample_data <- read_tsv(ldsc_files[1], n_max = 1)
message("Dostępne kolumny w plikach wynikowych:")
print(names(sample_data))
}
ldsc_files <- list.files("../data/superclusters",
pattern = ".*Amygdala_excitatory.*results",
full.names = TRUE
)
# 2. Sprawdź nazwy kolumn w pierwszym pliku (diagnostyka)
if(length(ldsc_files) > 0) {
sample_data <- read_tsv(ldsc_files[1], n_max = 1)
message("Dostępne kolumny w plikach wynikowych:")
print(names(sample_data))
}
ldsc_files <- list.files("../data/superclusters",
pattern = ".*Amygdala_excitatory.*results",
full.names = TRUE
)
# 2. Sprawdź nazwy kolumn w pierwszym pliku (diagnostyka)
if(length(ldsc_files) > 0) {
sample_data <- read_tsv(ldsc_files[1], n_max = 1)
message("Dostępne kolumny w plikach wynikowych:")
print(names(sample_data))
else {
message("niema:")
}
}
ldsc_files <- list.files("../data/superclusters",
pattern = ".*Amygdala_excitatory.*results",
full.names = TRUE
)
# 2. Sprawdź nazwy kolumn w pierwszym pliku (diagnostyka)
if(length(ldsc_files) > 0) {
sample_data <- read_tsv(ldsc_files[1], n_max = 1)
message("Dostępne kolumny w plikach wynikowych:")
print(names(sample_data))
}
else {
message("niema:")
}
library(tidyverse)
library(here)
# 1. Znajdź pliki wynikowe w podkatalogach
ldsc_files <- list.files(
("../data/superclusters"),
pattern = ".*results$",
recursive = TRUE,  # Przeszukaj podkatalogi
full.names = TRUE
) %>%
str_subset("Amygdala_excitatory")  # Tylko pliki dotyczące Amygdala
# 2. Funkcja do bezpiecznego wczytywania z diagnostyką
read_ldsc_file <- function(path) {
tryCatch({
data <- read_tsv(path, show_col_types = FALSE)
# Sprawdź dostępne kolumny i wybierz odpowiednie
if ("Name" %in% names(data)) {
data %>%
select(
cluster = Name,
coefficient = Coefficient,
p_value = "Coefficient_P-value",  # Uwaga na myślnik!
z_score = "Coefficient_Z-score"
)
} else if ("Category" %in% names(data)) {
data %>%
select(
cluster = Category,
coefficient = Coefficient,
p_value = "P-value",
z_score = "Z-score"
)
} else {
message("Nieznany format w pliku: ", path)
return(NULL)
}
}, error = function(e) {
message("Błąd przy wczytywaniu ", path, ": ", e$message)
return(NULL)
})
}
# 3. Wczytaj i połącz wszystkie pliki
ldsc_results <- map_dfr(ldsc_files, read_ldsc_file) %>%
filter(!is.na(cluster)) %>%
mutate(
cluster = str_extract(cluster, "V\\d+"),
p_fdr = p.adjust(p_value, method = "fdr")
)
# 4. Sprawdź wyniki
if(nrow(ldsc_results) > 0) {
message("Znaleziono wyniki dla ", n_distinct(ldsc_results$cluster), " klastrów")
print(head(ldsc_results))
# Zapisz wyniki
write_tsv(ldsc_results, ("../data/amygdala_ldsc_results.tsv"))
} else {
message("Brak danych. Sprawdź:")
message("1. Strukturę plików w: ", ("../data/superclusters/Amygdala_excitatory"))
message("2. Przykładową zawartość pliku:")
print(readLines(ldsc_files[1], n = 10))
}
library(tidyverse)
library(here)
# 1. Znajdź pliki wynikowe w podkatalogach
ldsc_files <- list.files(
("../data/superclusters"),
pattern = ".*results$",
recursive = TRUE,  # Przeszukaj podkatalogi
full.names = TRUE
) %>%
str_subset("Amygdala_excitatory")  # Tylko pliki dotyczące Amygdala
# 2. Funkcja do bezpiecznego wczytywania z diagnostyką
read_ldsc_file <- function(path) {
tryCatch({
data <- read_tsv(path, show_col_types = FALSE)
# Sprawdź dostępne kolumny i wybierz odpowiednie
if ("Name" %in% names(data)) {
data %>%
select(
cluster = Name,
coefficient = Coefficient,
p_value = "Coefficient_P-value",  # Uwaga na myślnik!
z_score = "Coefficient_Z-score"
)
} else if ("Category" %in% names(data)) {
data %>%
select(
cluster = Category,
coefficient = Coefficient,
p_value = "P-value",
z_score = "Z-score"
)
} else {
message("Nieznany format w pliku: ", path)
return(NULL)
}
}, error = function(e) {
message("Błąd przy wczytywaniu ", path, ": ", e$message)
return(NULL)
})
}
# 3. Wczytaj i połącz wszystkie pliki
ldsc_results <- map_dfr(ldsc_files, read_ldsc_file) %>%
filter(!is.na(cluster)) %>%
mutate(
cluster = str_extract(cluster, "V\\d+"),
p_fdr = p.adjust(p_value, method = "fdr")
)
# 4. Sprawdź wyniki
if(nrow(ldsc_results) > 0) {
message("Znaleziono wyniki dla ", n_distinct(ldsc_results$cluster), " klastrów")
print(head(ldsc_results))
# Zapisz wyniki
write_tsv(ldsc_results, ("../data/amygdala_ldsc_results.tsv"))
} else {
message("Brak danych. Sprawdź:")
message("1. Strukturę plików w: ", ("../data/superclusters/Amygdala_excitatory"))
message("2. Przykładową zawartość pliku:")
print(readLines(ldsc_files[1], n = 10))
}
